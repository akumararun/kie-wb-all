<!--
    CDI-extensions descriptor patch.

    For EAP 6.0.0 the CDI extensions located inside static module resources are not loaded.
    It's a known issue. See https://bugzilla.redhat.com/show_bug.cgi?id=988093
    So, this patch copies the extensions located in static module resources into the webapp.

    - Patch id: dynamic-module-patch-cdi-extensions

    - Global Input properties
      - modules.source.path
      - modules.output.path
      - patches.source.path
      - scripts.source.path
      - modules.temp.path

    - LifeCycle
      - init
        - module-name
        - module-output-path

      - create-module-assembly
        - module-name
        - module-output-path
        - module-target-path
        - assembly-dependencysets-exclusion
        - assembly-filesets
        - assembly-files
        - patch-value

      - finish
        - module-name
        - module-output-path

-->

<project name="dynamic-module-patch-cdi-extensions" xmlns:ac="net.sf.antcontrib" basedir="../../../../">

  <!-- Dynamic modules tasks available for the patch. -->
  <import file="${scripts.source.path}build-dynamic-module.xml"/>

  <!-- Patch Init lifecycle task.

        Input parameteres:
        - module-name
        - module-output-path
    -->
  <target name="init">

  </target>

  <!-- Patch lifecycle task when creating the assembly descriptor for the dynamic module.

        Input parameteres:
        - module-name
        - module-output-path
        - module-target-path
        - assembly-dependencysets-exclusion
        - assembly-filesets
        - assembly-files
        - patch-value
    -->
  <target name="create-module-assembly">

    <echo>Executing patch dynamic-module-patch-cdi-extensions for module ${module-name} </echo>

    <!--  Generate the cdi-extensions output.-->
    <antcall target="create-cdi-extensions">
      <param name="module-name" value="${module-name}"/>
      <param name="module-patches-cdi-extensions" value="${patch-value}"/>
      <param name="file-name" value="${assembly-filesets}"/>
    </antcall>

    <!-- Create the cdi extensions inclusions for the generated assembly descripttor. -->
    <antcall target="create-file-set-inclusion">
      <param name="file-name" value="${assembly-filesets}"/>
      <param name="directory" value="${modules.output.path}${module.name}${file.separator}META-INF${file.separator}services${file.separator}"/>
      <param name="output-directory" value="META-INF/services"/>
      <param name="include" value="*"/>
    </antcall>

  </target>

  <!-- Generate the CDI extensions output..
        - Copy the cdi extensions to META-INF/services of the webapp.
        - Merge all SPI extensions from patches source path into <code>javax.enterprise.inject.spi.Extension</code> file.

       Input parameteres:
       - module-name
       - module-patches-cdi-extensions
       - file-name
   -->
  <target name="create-cdi-extensions">

    <!-- The path for javax.enterprise.inject.spi.Extension generated file. -->
    <property name="patches.cdi-extensions.output.path" value="${modules.output.path}${module-name}${file.separator}META-INF${file.separator}services${file.separator}"/>
    <property name="module.patches.cdi-extensions.spi-file.output.path" value="${patches.cdi-extensions.output.path}javax.enterprise.inject.spi.Extension"/>
    <property name="patches.cdi-extensions.source.path" value="${patches.source.path}dynamic-module-patch-cdi-extensions${file.separator}cdi-extensions${file.separator}"/>

    <ac:for param="cdi-extension" list="${module-patches-cdi-extensions}" delimiter=",">
      <ac:sequential>

        <copy todir="${patches.cdi-extensions.output.path}">
          <fileset dir="${patches.cdi-extensions.source.path}@{cdi-extension}${file.separator}">
            <exclude name="**/javax.enterprise.inject.spi.Extension"/>
          </fileset>
        </copy>


        <ac:if>
          <available file="${patches.cdi-extensions.source.path}@{cdi-extension}${file.separator}javax.enterprise.inject.spi.Extension"/>
          <ac:then>
            <antcall target="append-cdi-extension-spi-file">
              <param name="source-file" value="${patches.cdi-extensions.source.path}@{cdi-extension}${file.separator}javax.enterprise.inject.spi.Extension"/>
              <param name="dest-file" value="${module.patches.cdi-extensions.spi-file.output.path}"/>
            </antcall>
          </ac:then>
        </ac:if>

      </ac:sequential>
    </ac:for>

  </target>

  <!-- Append the content for javax.enterprise.inject.spi.Extension generated file.

    Input parameteres:
    - source-file
    - dest-file
-->
  <target name="append-cdi-extension-spi-file">

    <loadfile property="cdi-extension.spi-file.source.content"
              srcFile="${source-file}"
              encoding="UTF-8" failonerror="true"/>

    <echo file="${dest-file}" append="true">${cdi-extension.spi-file.source.content}</echo>
    <echo file="${dest-file}" append="true">${line.separator}</echo>

  </target>

  <!-- Patch finish lifecycle task.

        Input parameteres:
        - module-name
        - module-output-path
    -->
  <target name="finish">

  </target>

</project>