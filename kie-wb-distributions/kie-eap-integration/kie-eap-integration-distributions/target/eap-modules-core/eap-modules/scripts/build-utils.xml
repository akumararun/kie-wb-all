<!--
INPUT parameters:
- templates.path -> The source forlder where all templates are located.
-->
<project name="build-utils" xmlns:ac="net.sf.antcontrib" basedir="../">

    <property name="templates.assembly-properties.file.path" value="${templates.path}${file.separator}assembly.properties"/>

    <!-- Load assembly properties. -->
    <property file="${templates.assembly-properties.file.path}"/>

    <!-- Cleans a directory..
              Input parameters:
              - dir
          -->
    <macrodef name="clean">
      <attribute name="dir" default=""/>
      <sequential>
        <delete dir="@{dir}" includeemptydirs="true" failonerror="false"/>
        <mkdir dir="@{dir}"/>
      </sequential>
    </macrodef>


    <!-- Generates content from a template property..
            Input parameters:
            - template-property -> The template file to use.
            - temp-path -> Path for temporary files.
            - template-prop-params -> Macrodef element to set template parameters.
            - template-prop-result -> Macrodef element that set the result into @teamplated-content attribute.
        -->
    <macrodef name="build-from-template-property">
        <attribute name="template-property" default=""/>
        <attribute name="temp-path" default="${java.io.tmpdir}"/>
        <element name="template-prop-params" optional="yes"/>
        <element name="template-prop-result" optional="yes"/>

        <sequential>
            <tempfile destdir="@{temp-path}"
                      property="temp2.file" createfile="true" deleteonexit="true" suffix="template-property"/>
            <echo file="${temp2.file}">${assembly.eap-modules.@{template-property}}</echo>

            <build-from-template-file template-file="${temp2.file}"
                                      temp-path="@{temp-path}">
                <template-file-params>
                    <template-prop-params/>
                </template-file-params>
                <template-file-result>
                    <template-prop-result/>
                </template-file-result>
            </build-from-template-file>

        </sequential>
    </macrodef>

    <!-- Generates content from a template file..
        Input parameters:
        - template-file -> The template file to use.
        - temp-path -> Path for temporary files.
        - template-file-params -> Macrodef element to set template parameters.
        - template-file-result -> Macrodef element that set the result into @teamplated-content attribute.
    -->
    <macrodef name="build-from-template-file">
        <attribute name="template-file" default=""/>
        <attribute name="temp-path" default="${java.io.tmpdir}"/>
        <element name="template-file-params" optional="yes"/>
        <element name="template-file-result" optional="yes"/>

        <sequential>
            <tempfile destdir="@{temp-path}"
                    property="temp.file" createfile="true" deleteonexit="true" suffix="template-file"/>

            <concat destfile="${temp.file}" append="true">
                <fileset file="@{template-file}"/>
                <filterchain>
                    <filterreader classname="org.apache.tools.ant.filters.ReplaceTokens">
                        <template-file-params/>
                    </filterreader>
                </filterchain>
            </concat>
            <loadfile property="template.result"
                      srcFile="${temp.file}"
                      encoding="UTF-8" quiet="true"/>
            <template-result-helper template-content="${template.result}">
                <template-result-element>
                    <template-file-result/>
                </template-result-element>
            </template-result-helper>


        </sequential>
    </macrodef>

    <!-- Used to pass the template result content to a macrodef element...
          Input parameters:
          - template-content -> The template content.
          - template-result-element -> Macrodef element to set template content to the element.
      -->
    <macrodef name="template-result-helper">
      <attribute name="template-content" default=""/>
      <element name="template-result-element" optional="yes"/>
      <sequential>
        <template-result-element/>
      </sequential>
    </macrodef>


    <!-- Iterate over all patches, if the patch apply for the given JBoss EAP version, for a given module.
        Input parameters:
        - module-name
        - module-file
        - eap-configuration-file
        Output:
          - Macro element: module-patch-iterator-result
            - Output property: patch-definition
    -->
    <macrodef name="module-patch-iterator">
        <attribute name="module-name" default=""/>
        <attribute name="module-file" default=""/>
        <attribute name="eap-configuration-file" default=""/>
        <element name="module-patch-iterator-result" optional="yes"/>
        <sequential>

            <!-- Read module properties. -->
            <property file="@{module-file}"/>

            <!-- Iterate over all patches for this module. -->
            <ac:propertyselector property="patches" match="module\.patch\.(.*)" select="\1"/>
            <ac:if>
              <isset property="patches"/>
              <ac:then>
                <ac:for list="${patches}" param="patch">
                  <ac:sequential>

                    <!-- Check if the patch apply for the eap version to deploy the modules layer. -->
                    <eap-configuration-property eap-config-file="@{eap-configuration-file}" eap-config-property="patch.@{patch}">
                      <eap-configuration-property-result>
                        <ac:if>
                          <ac:equals arg1="@{property-value}" arg2="true"/>
                          <ac:then>
                            <module-patch-iterator-helper patch-definition="@{patch}">
                              <module-patch-iterator-element>
                                <module-patch-iterator-result/>
                              </module-patch-iterator-element>
                            </module-patch-iterator-helper>
                          </ac:then>
                        </ac:if>
                      </eap-configuration-property-result>
                    </eap-configuration-property>
                  </ac:sequential>
                </ac:for>
              </ac:then>
            </ac:if>
        </sequential>
    </macrodef>

    <!-- Used to pass the patch to a macrodef element...
          Input parameters:
          - patch-definition -> The module definition for the patch.
          - module-patch-iterator-element -> Macrodef element to set the patch definition to the element.
      -->
    <macrodef name="module-patch-iterator-helper">
      <attribute name="patch-definition" default=""/>
      <element name="module-patch-iterator-element" optional="yes"/>
      <sequential>
        <module-patch-iterator-element/>
      </sequential>
    </macrodef>

    <!-- Calls the init patch lifecycle method.
                  Input parameteres:
                  - patch-definition
                  - module-name
                  - module-output-path
                  - patches.source.path
              -->
    <target name="patch-init">

      <!-- Extract the patch identitifer from path definition. -->
      <ac:propertyregex property="patch-id"
                        input="${patch-definition}"
                        regexp="(.*)=(.*)"
                        select="\1"
                        casesensitive="false" />

      <!-- NOTE: Use inheritAll=true to have all dependencies from antrun plugin in scope. -->
      <ant antfile="${patches.source.path}${patch-id}${file.separator}${patch-id}.xml"
           target="init" inheritRefs="true" inheritall="true"/>

    </target>

    <!-- Calls the finish patch lifecycle method.
                  Input parameteres:
                  - patch-definition
                  - module-name
                  - module-output-path
                  - patches.source.path
              -->
    <target name="patch-finish">

      <!-- Extract the patch identitifer from path definition. -->
      <ac:propertyregex property="patch-id"
                        input="${patch-definition}"
                        regexp="(.*)=(.*)"
                        select="\1"
                        casesensitive="false" />

      <!-- NOTE: Use inheritAll=true to have all dependencies from antrun plugin in scope. -->
      <ant antfile="${patches.source.path}${patch-id}${file.separator}${patch-id}.xml"
           target="finish" inheritRefs="true" inheritall="true"/>

    </target>

    <!-- Deploys the generated artifacts into a JBoss EAP installation.
          Input parameters:
          - eap-path: Filesystem path where JBoss EAP is installed.
          - dynamic-modules-paths: Comma separated path for dynamic modules to deploy in EAP.
          - static-module-path: Path for the ZIP artifact that contain the EAP static layer to deploy.
      -->
    <target name="deploy-on-eap">

      <!-- Property eap-path is required. -->
      <fail message="Property eap-path is missing.">
        <condition>
          <not>
            <isset property="eap-path"/>
          </not>
        </condition>
      </fail>

      <property name="eap-deployments-path" value="${eap-path}/standalone/deployments"/>

      <!-- Copy the static module ZIP artifact into EAP. -->
      <ac:if>
        <available file="${static-module-path}"/>
        <ac:then>
          <echo level="info">Unzipping ${static-module-path} into ${eap-path}</echo>
          <unzip src="${static-module-path}" dest="${eap-path}" overwrite="true"/>
        </ac:then>
        <ac:else>
          <echo level="info">No static layer distribution found at path ${static-module-path}</echo>
        </ac:else>
      </ac:if>

      <!-- Deploy each dynamic module into EAP. -->
      <ac:for param="dynamic-module" list="${dynamic-modules-paths}" delimiter=",">
        <ac:sequential>
          <ac:if>
            <available file="@{dynamic-module}"/>
            <ac:then>
              <echo level="info">Copying @{dynamic-module} into ${eap-deployments-path}</echo>
              <copy file="@{dynamic-module}" todir="${eap-deployments-path}" failonerror="true"/>
            </ac:then>
            <ac:else>
              <echo level="info">No dynamic module found at path @{dynamic-module}</echo>
            </ac:else>
          </ac:if>
        </ac:sequential>
      </ac:for>

    </target>

    <!-- For TESTING purposes. -->
    <target name="test-template-file">
        <property name="templates.assembly-eap-module.file.result.path" value="/home/romartin/development/temp/kie-wb-distributions-romartin/kie-wb/kie-wb-distribution-wars/src/main/eap-6_1-modules/result/result.txt"/>
        <build-from-template-file template-file="${templates.assembly-eap-modules.file.path}">
            <template-file-params>
                <param type="token" name="COMPONENT_DESCRIPTORS" value="prva"/>
            </template-file-params>
            <template-file-result>
                <property name="result" value="@{template-content}"/>
            </template-file-result>
        </build-from-template-file>
        <echo>Result: ${result}</echo>
    </target>

    <!-- For TESTING purposes. -->
    <target name="test-template-property">

        <build-from-template-property template-property="dependency-set.exclude">
            <template-prop-params>
                <param type="token" name="DEPENDENCY" value="prva"/>
            </template-prop-params>
            <template-prop-result>
                <property name="result" value="@{template-content}"/>
            </template-prop-result>
        </build-from-template-property>

        <echo>Result: ${result}</echo>
    </target>

    <!-- For TESTING purposes. -->
    <target name="test-template-dependency-set">
        <antcall target="test-template-dependency-set-include-inc"/>
        <antcall target="test-template-dependency-set-include-exc"/>
    </target>

    <!-- For TESTING purposes. -->
    <target name="test-template-dependency-set-include-inc">
        <template-dependency-set-include dependency="INC">
            <template-dependency-set-include-result>
                <property name="result-include" value="@{template-content}"/>
            </template-dependency-set-include-result>
        </template-dependency-set-include>
        <echo>Include: ${result-include}</echo>
    </target>

    <!-- For TESTING purposes. -->
    <target name="test-template-dependency-set-include-exc">
        <template-dependency-set-exclude dependency="EXC">
            <template-dependency-set-exclude-result>
                <property name="result-exclude" value="@{template-content}"/>
            </template-dependency-set-exclude-result>
        </template-dependency-set-exclude>
        <echo>Exclude: ${result-exclude}</echo>
    </target>

</project>