<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Generate data model code.</title>

  <para>The data model in itself is merely a visual tool that allows the user
  to define high-level data structures, for them to interact with the Drools
  Engine on the one hand, and the jBPM platform on the other. In order for
  this to become possible, these high-level visual structures have to be
  transformed into low-level artifacts that can effectively be consumed by
  these platforms. These artifacts are Java POJOs (Plain Old Java Objects),
  and they are generated every time the data model is saved, by pressing the
  "Save" button in the top Data Modeller Menu.</para>

  <figure>
    <title>Save the data model from the top menu</title>

    <screenshot>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/DataModeller/save_top.jpg"/>
        </imageobject>
      </mediaobject>
    </screenshot>
  </figure>

  <para/>

  <para>At this time each entity that has been defined in the model will be
  translated into a Java class, according to the following transformation
  rules:</para>

  <itemizedlist>
    <listitem>
      <para>The entity's identifier property will become the Java class's
      name. It therefore needs to be a valid Java identifier.</para>
    </listitem>

    <listitem>
      <para>The entity's package property becomes the Java class's package
      declaration.</para>
    </listitem>

    <listitem>
      <para>The entity's superclass property (if present) becomes the Java
      class's extension declaration.</para>
    </listitem>

    <listitem>
      <para>The entity's label and description properties will translate into
      the Java annotations
      "@org.kie.workbench.common.services.datamodeller.annotations.Label" and
      "@org.kie.workbench.common.services.datamodeller.annotations.Description",
      respectively. These annotations are merely a way of preserving the
      associated information, and as yet are not processed any further.</para>
    </listitem>

    <listitem>
      <para>The entity's role property (if present) will be translated into
      the "@org.kie.api.definition.type.Role" Java annotation, that
      <emphasis>IS</emphasis> interpreted by the application platform, in the
      sense that it marks this Java class as a Drools Event Fact-Type.</para>
    </listitem>
  </itemizedlist>

  <para/>

  <para>A standard Java default (or no parameter) constructor is generated, as
  well as a full parameter constructor, i.e. a constructor that accepts as
  parameters a value for each of the entity's user-defined attributes.</para>

  <para>The entity's user-defined attributes are translated into Java class
  fields, each one of them with its own getter and setter method, according to
  the following transformation rules:</para>

  <itemizedlist>
    <listitem>
      <para>The entity attribute's identifier will become the Java field
      identifier. It therefore needs to be a valid Java identifier.</para>
    </listitem>

    <listitem>
      <para>The entity attribute's type is directly translated into the Java
      class's field type. In case the entity attribute was declared to be
      multiple (i.e. '[0..N]'), then the generated field is of the
      "java.util.List" type.</para>
    </listitem>

    <listitem>
      <para>The equals property: when it is set for a specific attribute, then
      this class property will be annotated with the
      "@org.kie.api.definition.type.Key" annotation, which is interpreted by
      the Drools Engine, and it will 'participate' in the generated equals()
      method, which overwrites the equals() method of the Object class. The
      latter implies that if the attribute is a 'primitive' type, the equals
      method will simply compares its value with the value of the
      corresponding attribute in another instance of the class. If the
      attribute is a sub-entity or a collection type, then the equals method
      will make a method-call to the equals method of the corresponding
      entity's Java class, or of the java.util.List standard Java class,
      respectively.</para>

      <para>If the equals property is checked for <emphasis>ANY</emphasis> of
      the entity's user defined attributes, then this also implies that in
      addition to the default generated constructors another constructor is
      generated, accepting as parameters all of the attributes that were
      marked with Equals. Furthermore, generation of the equals() method also
      implies that also the Object class's hashCode() method is overwritten,
      in such a manner that it will call the hashCode() methods of the
      corresponding Java class types (be it 'primitive' or user-defined types)
      for all the attributes that were marked with Equals in the Data
      Model.</para>
    </listitem>

    <listitem>
      <para>The position property: this field property is automatically set
      for all user-defined attributes, starting from 0, and incrementing by 1
      for each subsequent new attribute. However the user can freely changes
      the position among the attributes. At code generation time this property
      is translated into the "@org.kie.api.definition.type.Position"
      annotation, which can be interpreted by the Drools Engine. Also, the
      established property order determines the order of the constructor
      parameters in the generated Java class.</para>
    </listitem>

    <listitem>
      <para>The entity's role property (if present) will be translated into
      the "@org.kie.api.definition.type.Role" Java annotation, that
      <emphasis>IS</emphasis> interpreted by the application platform, in the
      sense that it marks this Java class as a Drools Event Fact-Type.</para>
    </listitem>
  </itemizedlist>

  <para/>

  <para>As an example, the generated Java class code for the Purchase Order
  entity, corresponding to its definition as shown in the following figure
  purchase_example.jpg is visualized in the figure at the bottom of this
  chapter. Note that the two of the entity's attributes, namely 'header' and
  'lines' were marked with Equals, and have been assigned with the positions 2
  and 1, respectively).</para>

  <figure>
    <title>Purchase Order configuration</title>

    <screenshot>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/DataModeller/purchase_example.jpg"/>
        </imageobject>
      </mediaobject>
    </screenshot>
  </figure>

  <para/>

  <example>
    <para><emphasis role="bold">EXAMPLE CODE TO BE INSERTED</emphasis></para>
  </example>

  <para/>
</section>
