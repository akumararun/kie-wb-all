/**
 * Copyright (C) 2012 JBoss Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.jbpm.formModeler.core.processing.fieldHandlers;



import org.jbpm.formModeler.api.model.Field;
import org.jbpm.formModeler.api.model.Form;
import org.jbpm.formModeler.core.processing.*;

import javax.inject.Named;
import java.util.*;

@Named("org.jbpm.formModeler.core.processing.fieldHandlers.SubformFieldHandler")
public class SubformFieldHandler extends DefaultFieldHandler {

    private String pageToIncludeForRendering = "/formModeler/fieldHandlers/Subform/input.jsp";
    private String pageToIncludeForDisplaying = "/formModeler/fieldHandlers/Subform/show.jsp";
    private String pageToIncludeForSearching = "/formModeler/fieldHandlers/Subform/search.jsp";

    private static int maxDepth=2;
    /**
     * Determine the list of class types this field can generate. That is, normally,
     * a field can generate multiple outputs (an input text can generate Strings,
     * Integers, ...)
     *
     * @return the set of class types that can be generated by this handler.
     */
    public String[] getCompatibleClassNames() {
        return new String[]{String.class.getName()};
    }


    public synchronized Object getValue(Field field, String inputName, Map parametersMap, Map filesMap, String desiredClassName, Object previousValue) throws Exception {
        String[] formModeParams = (String[]) parametersMap.get(inputName + "_formMode");
        String formMode = formModeParams[0];
        Form form = getEnterDataForm(formMode, field);
        if (!checkSubformDepthAllowed(form.getId(), inputName)) return null;
        getFormProcessor().setValues(form, inputName, parametersMap, filesMap);
        FormStatusData status = getFormProcessor().read(form, inputName);
        if (status.isValid()) {
            // Check if form status is empty & if the object already exists to avoid null objects creation.
            if (status.getLoadedItemId() == null && status.isEmpty()) return null;
            Map m = getFormProcessor().getMapRepresentationToPersist(form, inputName);
            m.put(FormProcessor.FORM_MODE, formMode);
            return m;
        } else {
            throw new IllegalArgumentException("Cannot create subEntity. Subform status is invalid.");
        }
    }



    public Map getParamValue(String inputName, Object objectValue, String pattern) {
        if (objectValue == null)
            return Collections.EMPTY_MAP;
        Map m = new HashMap();
        Map value = (Map) objectValue;
        String formMode = (String) value.get(FormProcessor.FORM_MODE);

        FormNamespaceData fnsdt = getNamespaceManager().getNamespace(inputName);
        Field field = fnsdt.getForm().getField(fnsdt.getFieldNameInParent());
        Form form = getEnterDataForm(formMode, field);
        for (Iterator it = form.getFormFields().iterator(); it.hasNext();) {
            Field fieldInChildren = (Field) it.next();
            Object val = value.get(fieldInChildren.getFieldName());
            if (val instanceof Map)
                try {
                    ((Map) val).put(FormProcessor.FORM_MODE, formMode);
                } catch (UnsupportedOperationException uoe) {/*Ignore read-only maps*/}
            FieldHandler fieldManager = getFieldHandlersManager().getHandler(fieldInChildren.getFieldType());
            Map childrenMap = fieldManager.getParamValue(inputName + FormProcessor.NAMESPACE_SEPARATOR + form.getId() + FormProcessor.NAMESPACE_SEPARATOR + fieldInChildren.getFieldName(), val, field.getFieldPattern());
            if (childrenMap != null) m.putAll(childrenMap);
        }
        return m;
    }


    /**
     * When rendering a form, if field is handled by this handler, determine the
     * page that renders the displaying of the value
     *
     * @return a page to include
     */
    public String getPageToIncludeForDisplaying() {
        return pageToIncludeForDisplaying;
    }

    public boolean isEmpty(Object value) {
        return value == null || "".equals(value);
    }

    public void setPageToIncludeForDisplaying(String pageToIncludeForDisplaying) {
        this.pageToIncludeForDisplaying = pageToIncludeForDisplaying;
    }

    public boolean acceptsPropertyName(String propName) {
        return true;
    }

    /**
     * When rendering a form, if field is handled by this handler, determine the
     * page that renders the input(s)
     *
     * @return a page to include
     */
    public String getPageToIncludeForRendering() {
        return pageToIncludeForRendering;
    }

    public void setPageToIncludeForRendering(String pageToIncludeForRendering) {
        this.pageToIncludeForRendering = pageToIncludeForRendering;
    }

    public String getPageToIncludeForSearching() {
        return pageToIncludeForSearching;
    }

    public void setPageToIncludeForSearching(String pageToIncludeForSearching) {
        this.pageToIncludeForSearching = pageToIncludeForSearching;
    }
    protected Form getEnterDataForm(String formMode, Field field) {
        String formName="";
        if ("create".equals(formMode)) {
            formName=field.getCreationSubform();
        } else if ("edit".equals(formMode)) {
            formName = field.getEditionSubform();
        } else if ("display".equals(formMode)) {
            formName = field.getPreviewSubform();
        }
        if(formName==null || formName.trim().length()<1)
            formName = field.getDefaultSubform();
        return getForm(formName);

    }

    private Form getForm(String formName) {
        try {
            List candidateForms =getFormManager().getFormsBySubjectAndName("",formName);
            if(candidateForms!=null && candidateForms.size()>0) {
                return (Form)candidateForms.get(0);
            }
        } catch (Exception e) {

        }
        return null;
    }
    public static boolean checkSubformDepthAllowed(Long id, String namesapce) {
        StringTokenizer token = new StringTokenizer(namesapce, FormProcessor.NAMESPACE_SEPARATOR, false);
        String _id = id.toString();
        int count = 0;
        while (token.hasMoreElements()) {
            String idToCompare = (String) token.nextElement();
            if (idToCompare.equals(_id)) {
                count++;
                if (count >= maxDepth) {
                    return false;
                }
            }

        }
        return true;

    }
}
