<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Guvnor concepts</title>

  <section>
    <title>Rules are assets</title>

    <para>As the Guvnor can manage many different types of rules (and more),
    they are all classed as "assets". An asset is anything that can be stored
    as a version in the repository. This includes decision tables, models,
    DSLs and more. Sometimes the word "rule" will be used to really mean
    "asset" (i.e. the things you can do also apply to the other asset types).
    You can think of asset as a lot like a file in a folder. Assets are
    grouped together for viewing, or to make a package for deployment
    etc.</para>
  </section>

  <section>
    <title>Categorization</title>

    <figure>
      <title>Categories</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center"
                     fileref="images/Chapter-Guvnor/CatZoom.png" format="PNG"
                     scalefit="1"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>Categories allow rules (assets) to be labeled (or tagged) with any
    number of categories that you define. This means that you can then view a
    list of rules that match a specific category. Rules can belong to any
    number of categories. In the above diagram, you can see this can in effect
    create a folder/explorer like view of assets. The names can be anything
    you want, and are defined by the Guvnor administrator (you can also
    remove/add new categories - you can only remove them if they are not
    currently in use).</para>

    <para>Generally categories are created with meaningful name that match the
    area of the business the rule applies to (if the rule applies to multiple
    areas, multiple categories can be attached). Categories can also be used
    to "tag" rules as part of their life-cycle, for example to mark as "Draft"
    or "For Review".</para>

    <figure>
      <title>Assets can have multiple categories</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center"
                     fileref="images/Chapter-Guvnor/CatEdit.png" format="PNG"
                     scalefit="1"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The view above shows the category editor/viewer that is seen when
    you open an asset. In this example you can see the asset belongs to 2
    categories, with a "+" button to add additional items (use the trash can
    item to remove them). This means that when either category is used to show
    a list of assets, you will see that asset.</para>

    <para>In the above example, the first Category "Finance" is a "top level"
    category. The second one: "HR/Awards/QAS" is a still a single category,
    but its a nested category: Categories are hierarchical. This means there
    is a category called "HR", which contains a category "Awards" (it will in
    fact have more sub-categories of course), and "Awards" has a sub-category
    of QAS. The screen shows this as "HR/Awards/QAS" - its very much like a
    folder structure you would have on your hard disk (the notable exception
    is of course that rules can appear in multiple places).</para>

    <para>When you open an asset to view or edit, it will show a list of
    categories that it currently belongs to If you make a change (remove or
    add a category) you will need to save the asset - this will create a new
    item in the version history. Changing the categories of a rule has no
    effect on its execution.</para>

    <figure>
      <title>Creating categories</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center"
                     fileref="images/Chapter-Guvnor/AdminCats.png"
                     format="PNG" scalefit="1"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The above view shows the administration screen for setting up
    categories (there) are no categories in the system by default. As the
    categories can be hierarchical you chose the "parent" category that you
    want to create a sub-category for. From here categories can also be
    removed (but only if they are not in use by any current versions of
    assets).</para>

    <para>As a general rule, an asset should only belong to 1 or 2 categories
    at a time. Categories are critical in cases where you have large numbers
    of rules. The hierarchies do not need to be too deep, but should be able
    to see how this can help you break down rules/assets into manageable
    chunks. Its ok if its not clear at first, you are free to change
    categories as you go.</para>
  </section>

  <section>
    <title>The Asset Editor</title>

    <para>The Asset Editor is the principle component of Guvnor's
    User-Interface. It consists of two tabs:-</para>

    <itemizedlist>
      <listitem>
        <para>Attributes</para>

        <itemizedlist>
          <listitem>
            <para>A : Meta data (from the "Dublin Core" standard):-</para>

            <para>"Last modified:" The last modified date.</para>

            <para>"By:" Who made the last change.</para>

            <para>"Note:" A comment made when the Asset was last updated (i.e.
            why a change was made)</para>

            <para>"Created on:" The date and time the Asset was
            created.</para>

            <para>"Created by:" Who initially authored the Asset.</para>

            <para>"Format:" The short format name of the type of Asset.</para>

            <para>"Package:" The package to which the Asset belongs.</para>

            <para>"Is Disabled:" Whether the Asset has been disabled from
            inclusion in a binary package.</para>

            <para>"UUID:" A unique identifier for the Asset version.</para>
          </listitem>

          <listitem>
            <para>B : Other miscellaneous meta data for the Asset.</para>
          </listitem>

          <listitem>
            <para>C : Version history of the Asset.</para>
          </listitem>

          <listitem>
            <para>D : Free-format documentation\description for the Asset. It
            is encouraged, but not mandatory, to record a description of the
            Asset before editing.</para>
          </listitem>

          <listitem>
            <para>E : Discussions regarding development of the Asset can be
            recored here.</para>
          </listitem>
        </itemizedlist>

        <figure>
          <title>The Asset Editor - Attributes tab</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Guvnor/AssetEditor-attributes-1.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>

        <figure>
          <title>The Asset Editor - Other meta data</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Guvnor/AssetEditor-attributes-2.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>

        <figure>
          <title>The Asset Editor - Version history</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Guvnor/AssetEditor-attributes-3.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>

        <figure>
          <title>The Asset Editor - Description</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Guvnor/AssetEditor-attributes-4.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>

        <figure>
          <title>The Asset Editor - Discussion</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Guvnor/AssetEditor-attributes-5.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>
      </listitem>

      <listitem>
        <para>Edit</para>

        <itemizedlist>
          <listitem>
            <para>A : The Asset editor is where the "editor widget" lives -
            exactly what form the editor takes depends on the Asset
            type.</para>
          </listitem>

          <listitem>
            <para>B : These are menus contains various actions for the Asset;
            such as Saving, Archiving, changing Status etc.</para>
          </listitem>

          <listitem>
            <para>C : The current status of the Asset.</para>
          </listitem>
        </itemizedlist>

        <figure>
          <title>The Asset Editor - Edit tab</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Guvnor/AssetEditor-edit.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Rule authoring</title>

    <para>The Guvnor supports a (growing) list of formats of assets (rules).
    Here the key ones are described. Some of these are covered in other parts
    of the manual, and the detail will not be repeated here.</para>

    <section>
      <title>Business rules with the guided editor</title>

      <para>Guided editor style "Business rules": (also known as "BRL
      format"). These rules use the guided GUI which controls and prompts user
      input based on knowledge of the object model. This can also be augmented
      with DSL sentences.</para>

      <note>
        <para>To use the BRL guided editor, someone will need to have you
        package configured before hand.</para>
      </note>

      <figure>
        <title>The guided BRL editor</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Guvnor/GuidedEditor-overview.png"
                       format="PNG" scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The above diagram shows the editor in action. The following
      descriptions apply to the lettered boxes in the diagram:-</para>

      <para>A : The different parts of a rule:-<itemizedlist>
          <listitem>
            <para>The "WHEN" part, or conditions, of the rule.</para>
          </listitem>

          <listitem>
            <para>The "THEN" action part of the rule.</para>
          </listitem>

          <listitem>
            <para>Optional attributes that may effect the operation of the
            rule.</para>
          </listitem>
        </itemizedlist></para>

      <para>B : This shows a pattern which is declaring that the rule is
      looking for a "LoanApplication" fact (the fields are listed below, in
      this case none). Another pattern, "Applicant", is listed below
      "LoanApplication". Fields "creditRating" and "applicationDate" are
      listed. Clicking on the fact name ("LoanApplication") will pop-up a list
      of options to add to the fact declaration:-<itemizedlist>
          <listitem>
            <para>Add more fields (e.g. their "location").</para>
          </listitem>

          <listitem>
            <para>Assign a variable name to the fact (which you can use later
            on if needs be)</para>
          </listitem>

          <listitem>
            <para>Add "multiple field" constraints - i.e. constraints that
            span across fields (e.g. age &gt; 42 or risk &gt; 2).</para>
          </listitem>
        </itemizedlist></para>

      <para>C : The "minus" icon ("[-]") indicates you can remove something.
      In this case it would remove the whole "LoanApplication" fact
      declaration. Depending upon the placement of the icon different
      components of the rule declaration can be removed, for example a Fact
      Pattern, Field Constraint, other Conditional Element ("exists", "not
      exists", "from" etc) or an Action.</para>

      <para>D : The "plus" icon ("+") allows you to add more patterns to the
      condition or the action part of the rule, or more attributes. In all
      cases, a popup option box is provided. For the "WHEN" part of the rule,
      you can choose from a list of Conditional Elements to add: <itemizedlist
          spacing="normal">
          <listitem>
            <para>A Constraint on a Fact: it will give you a list of
            facts.</para>
          </listitem>

          <listitem>
            <para>"The following does not exist": the fact plus constraints
            must not exist.</para>
          </listitem>

          <listitem>
            <para>"The following exists": at least one match should exist (but
            there only needs to be one - it will not trigger for each
            match).</para>
          </listitem>

          <listitem>
            <para>"Any of the following are true": any of the patterns can
            match (you then add patterns to these higher level
            patterns).</para>
          </listitem>

          <listitem>
            <para>"From": this will insert a new From Conditional Element to
            the rule.</para>
          </listitem>

          <listitem>
            <para>"From Accumulate": this will insert a new Accumulate
            Conditional Element to the rule.</para>
          </listitem>

          <listitem>
            <para>"From Collect": this will insert a new Collect Conditional
            Element to the rule.</para>
          </listitem>

          <listitem>
            <para>"From Entry-point": this allows you to define an Entry Point
            for the pattern.</para>
          </listitem>

          <listitem>
            <para>"Free Form DRL": this will let you insert a free chunk of
            DRL.</para>
          </listitem>
        </itemizedlist> If you just put a fact (like is shown above) then all
      the patterns are combined together so they are all true ("and").</para>

      <para>E : This shows the constraint for the "creditRating" field.
      Looking from left to right you find:-<itemizedlist spacing="normal">
          <listitem>
            <para>The field name: "creditRating". Clicking on it you can
            assign a variable name to it, or access nested properties of
            it.</para>
          </listitem>

          <listitem>
            <para>A list of constraint operations ("equal to" being selected):
            The content of this list changes depending on the field's data
            type.</para>
          </listitem>

          <listitem>
            <orderedlist>
              <para>The value field: It could be one of the following:-</para>

              <listitem>
                <para>A literal value: depending on the field's data type
                different components will be displayed:</para>

                <itemizedlist>
                  <listitem>
                    <para>String or Number -&gt; TextBox</para>
                  </listitem>

                  <listitem>
                    <para>Date -&gt; Calendar</para>
                  </listitem>

                  <listitem>
                    <para>Enumeration -&gt; Combobox</para>
                  </listitem>

                  <listitem>
                    <para>Boolean -&gt; Checkbox</para>
                  </listitem>
                </itemizedlist>
              </listitem>

              <listitem>
                <para>A "formula": this is an expression which is calculated
                (this is for advanced users only)</para>
              </listitem>

              <listitem>
                <para>An Expression - this will let you use an Expression
                Builder to build up a full mvel expression. (At the moment
                only basic expressions are supported)</para>
              </listitem>
            </orderedlist>
          </listitem>
        </itemizedlist></para>

      <para>F : This shows the constraint for the "applicationDate" field.
      Looking from left to right you find: <itemizedlist spacing="normal">
          <listitem>
            <para>The field name: "applicationDate".</para>
          </listitem>

          <listitem>
            <para>A list of constraint operations: "after" being
            selected.</para>
          </listitem>

          <listitem>
            <para>A "clock" icon. Since the "applicationDate" is a Date
            data-type the list of available operators includes those relating
            to Complex Event Processing (CEP). When a CEP operator is used
            this additional icon is displayed to allow you to enter additional
            CEP operator parameters. Clicking the "clock" will cycle the
            available combinations of CEP operator parameters.</para>
          </listitem>
        </itemizedlist><note>
          <para>Complex Event Processing operators are also available when the
          Fact has been declared as an event. Refer to the "Fact Model"
          chapter of this user-guide for details on how to add annotations to
          your Fact model. Events have access to the full range of CEP
          operators; Date field-types are restricted to "after", "before" and
          "coincides".</para>
        </note><note>
          <para>Facts annotated as Events can also have CEP sliding windows
          defined.</para>
        </note></para>

      <para>G : Pattern/Action toolbar. Next to each Pattern or Action you
      will find a toolbar containing 3 buttons. The first button lets you
      insert a new Pattern/Action below the one you selected, the other two
      buttons will move the current Pattern/Action up or down.</para>

      <para>H : This shows an "action" of the rule, the Right Hand Side of a
      rule consists in a list of actions. In this case, we are updating the
      "explanation" field of the "LoanApplication" fact. There are quite a few
      other types of actions you can use:-<itemizedlist>
          <listitem>
            <para>Insert a completely new Fact</para>
          </listitem>

          <listitem>
            <para>Logically insert a completely new Fact (see "Truth
            Maintenance" in the Expert documentation).</para>
          </listitem>

          <listitem>
            <para>Modify an existing fact (which tells the engine the fact has
            changed).</para>
          </listitem>

          <listitem>
            <para>Set a field on a fact (in which case the engine doesn't know
            about the change - normally because you are setting a
            result).</para>
          </listitem>

          <listitem>
            <para>Retract a fact.</para>
          </listitem>

          <listitem>
            <para>Add Facts to existing global lists.</para>
          </listitem>

          <listitem>
            <para>Call a method on a variable.</para>
          </listitem>

          <listitem>
            <para>Write a chunk of free form code.</para>
          </listitem>
        </itemizedlist></para>

      <para>In most cases you can click on the Fact name to get a list of its
      attributes or to bind it to a variable name.</para>

      <section>
        <title>User driven drop down lists</title>

        <figure>
          <title>Data enumeration showing as a drop down list</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Guvnor/EnumDropDown.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>

        <para>Note that is it possible to limit field values to items in a pre
        configured list. This list is configured as part of the package (using
        a data enumeration to provide values for the drop down list). These
        values can be a fixed list, or (for example) loaded from a database.
        This is useful for codes, and other fields where there are set values.
        It is also possible to have what is displayed on screen, in a drop
        down, be different to the value (or code) used in a rule. See the
        section on data enumerations for how these are configured.</para>
      </section>

      <section>
        <title>Augmenting with DSL sentences</title>

        <para>If the package the rule is part of has a DSL configuration, when
        when you add conditions or actions, then it will provide a list of
        "DSL Sentences" which you can choose from - when you choose one, it
        will add a row to the rule - where the DSL specifies values come from
        a user, then a edit box (text) will be shown (so it ends up looking a
        bit like a form). This is optional, and there is another DSL editor.
        Please note that the DSL capabilities in this editor are slightly less
        then the full set of DSL features (basically you can do [when] and
        [then] sections of the DSL only - which is no different to drools 3 in
        effect).</para>

        <para>The following diagram shows the DSL sentences in action in the
        guided editor:</para>

        <figure>
          <title>DSL in guided editor</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Guvnor/GuidedDSL.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title>A more complex example:</title>

        <figure>
          <title>A more complex BRL example</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Guvnor/GuidedComplex.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>

        <para>In the above example, you can see how to use a mixture of
        Conditional Elements, literal values, and formulas. The rule has 4
        "top level" Patterns and 1 Action. The "top level" Patterns
        are:</para>

        <orderedlist spacing="compact">
          <listitem>
            <para>A Fact Pattern on Person. This Pattern contains two field
            constraints: one for birthdate field and the other one is a
            formula. Note that the value of the birthdate restriction is
            selected from a calendar. Another thing to note is that you can
            make calculations and use nested fields in the formula restriction
            (i.e. car.brand). Finally, we are setting a variable name ($p) to
            the Person Fact Type. You can then use this variable in other
            Patterns.</para>

            <note>
              <para>The generated DRL from this Pattern will be:</para>

              <programlisting>$p : Person( birthDate &lt; "19-Dec-1982" , eval( car.brand == "Ford" &amp;&amp; salary &gt; (2500 * 4.1) ))</programlisting>
            </note>
          </listitem>

          <listitem>
            <para>A From Pattern. This condition will create a match for every
            Address whose street name is "Elm St." from the Person's list of
            addresses. The left side of the from is a regular Fact Pattern and
            the right side is an Expression Builder that let us inspect
            variable's fields.</para>

            <note>
              <para>The generated DRL from this Pattern will be:
              <code>Address( street == "Elm St." ) from
              $p.addresses</code></para>
            </note>
          </listitem>

          <listitem>
            <para>A "Not Exist" Conditional Element. This condition will match
            when its content doesn't create a match. In this case, its content
            is a regular Fact Pattern (on Person). In this Fact Pattern you
            can see how variables ($p) could be used inside a formula
            value.</para>

            <note>
              <para>The generated DRL from this Pattern will be: <code>not
              Person( salary == ( $p.salary * 2 ) )</code></para>
            </note>
          </listitem>

          <listitem>
            <para>A "From Accumulate" Conditional Element. This is maybe one
            of the most complex Patterns you can use. It consist in a Left
            Pattern (It must be a Fact Pattern. In this case is a Number
            Pattern. The Number is named $totalAddresses), a Source Pattern
            (Which could be a Fact Pattern, From, Collect or Accumulate
            conditional elements. In this case is an Address Pattern
            Restriction with a field restriction in its zip field) and a
            Formula Section where you can use any built-in or custom
            Accumulate Function (in this example a count() function is used).
            Basically, this Conditional Element will count the addresses
            having a zip code of 43240 from the Person's list of
            addresses.</para>

            <note>
              <para>The generated DRL from this Pattern will be:
              <code>$totalAddresses : Number() from accumulate ($a : Address(
              zipCode == " 43240") from $p.addresses, count($a))
              </code></para>
            </note>
          </listitem>
        </orderedlist>

        <figure>
          <title>Adding Patterns</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Guvnor/GuidedLHSPatterns.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>

        <para>When clicking on the + button of the WHEN section, a new popup
        will appear letting you to add a new Pattern to the Rule. The popup
        will looks similar to the image above. In this popup you could select
        the type of Pattern to add by selecting one of the list items. In the
        list you will have an entry for each defined Fact Type, in addition to
        the already mentioned Conditional Elements like "exists", "doesn't
        exist", "from", "collect", "accumulate", "from entry-point" and "free
        form DRL". Once you have selected one of this elements, you can add a
        new Pattern by clicking on the "Ok" button. The new pattern will be
        added at the bottom of the rule's left hand side. If you wan't to
        choose a different position, you can use the combobox placed at the
        top of the popup.</para>

        <para>You can also open this popup by clicking in the [+] button from
        a Pattern's action toolbar. If that is the case, the pop-up that
        appears wouldn't containt the position combobox, because the new
        Pattern will be added just after the Pattern where you clicked.</para>

        <figure>
          <title>Adding constraints</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Guvnor/GuidedLHSConstraints.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>

        <para>The above dialog is what you will get when you want to add
        constraints to a fact. In the top half are the simple options: you can
        either add a field constraint straight away (a list of fields of the
        applicable fact will be shown), or you can add a "Multiple field
        constraint" using AND or OR operands. In the bottom half of the window
        you have the Advanced options: you can add a formula (which resolves
        to True or False - this is like in the example above: "... salary &gt;
        (2500 * 4.1)". You can also assign a Variable name to the fact (which
        means you can then access that variable on the action part of the
        rule, to set a value etc).</para>
      </section>
    </section>

    <section>
      <title>DSL editor</title>

      <para>The DSL editor allows DSL Sentences to be authored. The reader
      should take time to explore DSL features in the Drools Expert
      documentation; as the syntax in Guvnor's DSL Editor is identical. The
      normal syntax is extended to provide "hints" to control how the DSL
      variable is rendered and validated within the user-interface. </para>

      <para>The following "hints" are supported:-</para>

      <itemizedlist>
        <listitem>
          <para>{&lt;varName&gt;:&lt;regular expression&gt;}</para>

          <para>This will render a text field in place of the DSL variable
          when the DSL Sentence is used in the guided editor. The content of
          the text field will be validated against the regular expression.
          </para>
        </listitem>

        <listitem>
          <para>{&lt;varName&gt;:ENUM:&lt;factType.fieldName&gt;}</para>

          <para>This will render an enumeration in place of the DSL variable
          when the DSL Sentence is used in the guided editor.
          &lt;factType.fieldName&gt; binds the enumeration to the model Fact
          and Field enumeration definition. This could be either a "Guvnor
          enumeration" (i.e. defined as a Knowledge Base "Enumeration") or a
          Java enumeration (i.e. defined in a model POJO JAR file).</para>
        </listitem>

        <listitem>
          <para>{&lt;varName&gt;:DATE:&lt;dateFormat&gt;}</para>

          <para>This will render a Date selector in place of the DSL variable
          when the DSL Sentence is used in the guided editor.</para>
        </listitem>

        <listitem>
          <para>{&lt;varName&gt;:BOOLEAN:&lt;[checked | unchecked]&gt;}</para>

          <para>This will render a dropdown selector in place of the DSL
          variable, providing boolean choices, when the DSL Sentence is used
          in the guided editor.</para>
        </listitem>
      </itemizedlist>

      <figure>
        <title>DSL rule</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Guvnor/DSLEditor.png"
                       format="PNG" scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>DSL rules</title>

      <para>DSL rules are textual rules, that use a language configuration
      asset to control how they appear.</para>

      <figure>
        <title>DSL rule</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Guvnor/DSLRule.png"
                       format="PNG" scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>A dsl rule is a single rule. Referring to the picture above, you
      can a text editor. You can use the icons to the right to provide lists
      of conditions and actions to choose from (or else press Control + Space
      at the same time to pop up a list).</para>
    </section>

    <section>
      <title>Spreadsheet decision tables</title>

      <para>Multiple rules can be stored in a spreadsheet (each row is a
      rule). The details of the spreadsheet are not covered in this chapter
      (as there is a separate chapter for them).</para>

      <figure>
        <title>Spreadsheet decision table</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Guvnor/DecisionTable.png"
                       format="PNG" scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>To use a spreadsheet, you upload an XLS file (and can download the
      current version, as per the picture above). To create a new decision
      table, when you launch the rule wizard, you will get an option to create
      one (after that point, you can upload the XLS file).</para>
    </section>

    <section>
      <title>Guided decision tables (web based)</title>

      <para>The guided decision table feature allows decision tables to be
      edited in place on the web. This works similar to the guided editor by
      introspecting what facts and fields are available to guide the creation
      of a decision table. Rule attributes, meta-data, conditions and actions
      can be defined in a tabular format thus facilitating rapid entry of
      large sets of related rules. Web-based decision table rules are compiled
      into DRL like all other rule assets.</para>

      <para>Cells can be selected in a variety of ways:-<itemizedlist>
          <listitem>
            <para>Firstly individual cells can be double-clicked and a pop-up
            editor corresponding to the underlying data-type will appear.
            Groups of cells in the same column can be selected by either
            clicking in the first and dragging the mouse pointer or clicking
            in the first and clicking the extent of the required range with
            the shift key pressed.</para>
          </listitem>

          <listitem>
            <para>Secondly the keyboard cursor keys can be used to navigate
            around the table. Pressing the enter key will pop-up the
            correspondig editor. Ranges can be selected by pressing the shift
            key whilst extending the range with the cursor keys.</para>
          </listitem>
        </itemizedlist></para>

      <para>Columns can be resized by hovering over the corresponding divider
      in the table header. The mouse cursor will change and then the column
      width dragged either narrower or wider.</para>

      <figure>
        <title>Decision table</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Guvnor/dtable-complete.png"
                       format="PNG" scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <section>
        <title>Main components</title>

        <para>The guided decision table is split into two main
        sections:-<itemizedlist>
            <listitem>
              <para>The upper section allows table columns to be defined
              representing rule attributes, meta-data, conditions and
              actions.</para>
            </listitem>

            <listitem>
              <para>The lower section contains the actual table itself; where
              individual rows define seperate rules.</para>
            </listitem>
          </itemizedlist></para>

        <figure>
          <title>Main components</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Guvnor/dtable-sections.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title>Column configuration</title>

        <para>When you edit or create a new column, you will be given a choice
        of the type of constraint:-<itemizedlist>
            <listitem>
              <para>Literal : The value in the cell will be compared with the
              field using the operator.</para>
            </listitem>

            <listitem>
              <para>Formula: The expression in the cell will be evaluated and
              then compared with the field.</para>
            </listitem>

            <listitem>
              <para>Predicate : No field is needed, the expression will be
              evaluated to true or false.</para>
            </listitem>
          </itemizedlist></para>

        <para>You can set a default value, but normally if there is no value
        in the cell, that constraint will not apply.</para>

        <figure>
          <title>Column configuration</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Guvnor/dtable-column-config.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Utility columns</title>

          <para>Two columns containing rule number and description are
          provided by default.</para>
        </section>

        <section>
          <title>Attribute columns</title>

          <para>Zero or more attribue columns representing any of the DRL rule
          attributes can be added. An additional pseudo attribute is provide
          in the guided decision table editor to "negate" a rule. Use of this
          attribute allows complete rules to be negated. For example the
          following simple rule can be negated as also shown.<programlisting>when
  $c : Cheese( name == "Cheddar" )
then
  ...
end</programlisting><programlisting>when
  not Cheese( name == "Cheddar" )
then
  ...
end</programlisting></para>
        </section>

        <section>
          <title>Meta-data columns</title>

          <para>Zero or more meta-data columns can be defined, each represents
          the normal meta-data annotation on DRL rules.</para>
        </section>

        <section>
          <title>Condition columns</title>

          <para>Conditions represent fact patterns defined in the right-hand
          side, or "when" portion, of a rule. To define a condition column you
          must define a binding to a model class or select one that has
          previously been defined. You can choose to negate the pattern. Once
          this has been completed you can define field constraints. If two or
          more columns are defined using the same fact pattern binding the
          field constraints become composite field constraints on the same
          pattern. If you define multiple bindings for a single model class
          each binding becomes a seperate model class in the right-hand side
          of the rule.</para>
        </section>

        <section>
          <title>Action columns</title>

          <para>Action columns can be defined to perform simple operations on
          bound facts within the rule engine's working memory or create new
          facts entirely. New facts can be inserted logically into the rule
          engine's working memory thus being subject to truth maintenance as
          usual. Please refer to the "Drools Expert" documentation for
          discussion on truth maintenance and logical insertions.</para>
        </section>
      </section>

      <section>
        <title>Rule definition</title>

        <para>This section alows individual rules to be defined using the
        columns defined earlier.</para>

        <figure>
          <title>Rule definition</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Guvnor/dtable-body.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title>Cell merging</title>

        <para>The icon in the top left of the decision table toggles cell
        merging on and off. When cells are merged those in the same column
        with identical values are merged into a single cell. This simplifies
        changing the value of multiple cells that shared the same original
        value. When cells are merged they also gain an icon in the top-left of
        the cell that allows rows spanning the merged cell to be
        grouped.</para>

        <figure>
          <title>Cell merging</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Guvnor/dtable-merged.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title>Cell grouping</title>

        <para>Cells that have been merged can be further collapsed into a
        single row. Clicking the [+\-] icon in the top left of a merged cell
        collapses the corresponding rows into a single entry. Cells in other
        columns spanning the collapsed rows that have identical values are
        shown unchanged. Cells in other columns spanning the collapsed rows
        that have different values are highlighted and the first value
        displayed.</para>

        <figure>
          <title>Cell grouping</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Guvnor/dtable-grouped.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>

        <para>When the value of a grouped cell is altered all cells that have
        been collapsed also have their values updated.</para>
      </section>

      <section>
        <title>Operation of "otherwise"</title>

        <para>Condition columns defined with literal values that use either
        the equality (==) or inequality (!=) operators can take advantage of a
        special decision table cell value of "otherwise". This special value
        allows a rule to be defined that matches on all values not explicitly
        defined in all other rules defined in the table. This is best
        illustrated with an example:-<programlisting>when
  Cheese( name not in ("Cheddar", "Edam", "Brie") )
  ...
then
  ...
end</programlisting><programlisting>when
  Cheese( name in ("Cheddar", "Edam", "Brie") )
  ...
then
  ...
end</programlisting></para>
      </section>
    </section>

    <section>
      <title>Templates of assets/rules</title>

      <para>The guided rule editor is great when you need to define a single
      rule, however if you need to define multiple rules following the same
      structure but with different values in field constraints or action
      sections a "Rule Template" is a valuable asset. Rule templates allow the
      user to define a rule structure with place-holders for values that are
      to be interpolated from a table of data. Literal values, formulae and
      expressions can also continue to be used.</para>

      <para>Rule Templates can often be used as an alternative for Decision
      Tables in Drools Guvnor.</para>

      <section>
        <title>Creating a rule template</title>

        <para>To create a template for a rule simply select the "New Rule
        Template" from the Knowlegde Bases "Create New" popup menu. The create
        "New Rule Template" asset popup window will appear from which the
        normal asset attributes can be defined; such as name, category and
        description.</para>

        <figure>
          <title>Create a template</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Guvnor/template-rule1.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>

        <figure>
          <title>Create "New Rule Template" popup</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Guvnor/template-rule2.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title>Define the template</title>

        <para>Once a rule template has been created the editor is displayed.
        The editor takes the form of the standard guided editor explained in
        more detail under the "Rule Authoring" section. As the rule is
        constructed you are given the ability to insert "Template Keys" as
        place-holders within your field constraints and action sections.
        Literal values, formulae and expressions can continue to be used as in
        the standard guided editor.</para>

        <figure>
          <title>Template Key popup</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Guvnor/template-rule3.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>

        <para>The following screenshot illustrates a simple rule that has been
        defined with a "Template Key" for the applicants' maximum age, minimum
        age and credit rating. The template keys have been defined as
        "$max_age", "$min_age" and "$cr" respectively.</para>

        <figure>
          <title>Rule template in the guided editor</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Guvnor/template-rule4.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title>Defining the template data</title>

        <para>When you have completed the definition of your rule template you
        need to enter the data that will be used to interpolate the "Template
        Key" place-holders. Drools Guvnor provides the facility to enter data
        in a flexible grid within the guided editor screen. The grid editor
        can be launched by pressing the "Load Template Data" button on the
        guided editor screen.</para>

        <para>The rule template data grid is very flexible; with different
        pop-up editors for the underlying fields' data-types. Columns can be
        resized and sorted; and cells can be merged and grouped to facilitate
        rapid data entry.</para>

        <para>One row of data interpolates the "Template Key" place-holders
        for a single rule; thus one row becomes one rule.</para>

        <note>
          <para>If any cells for a row are left blank a rule for the
          applicable row is not generated.</para>
        </note>

        <figure>
          <title>Template data grid</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Guvnor/template-rule5.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Cell merging</title>

          <para>The icon in the top left of the grid toggles cell merging on
          and off. When cells are merged those in the same column with
          identical values are merged into a single cell. This simplifies
          changing the value of multiple cells that shared the same original
          value. When cells are merged they also gain an icon in the top-left
          of the cell that allows rows spanning the merged cell to be
          grouped.</para>

          <figure>
            <title>Cell merging</title>

            <mediaobject>
              <imageobject>
                <imagedata align="center"
                           fileref="images/Chapter-Guvnor/template-rule5-merged.png"
                           format="PNG" scalefit="1"></imagedata>
              </imageobject>
            </mediaobject>
          </figure>
        </section>

        <section>
          <title>Cell grouping</title>

          <para>Cells that have been merged can be further collapsed into a
          single row. Clicking the [+\-] icon in the top left of a merged cell
          collapses the corresponding rows into a single entry. Cells in other
          columns spanning the collapsed rows that have identical values are
          shown unchanged. Cells in other columns spanning the collapsed rows
          that have different values are highlighted and the first value
          displayed.</para>

          <figure>
            <title>Cell grouping</title>

            <mediaobject>
              <imageobject>
                <imagedata align="center"
                           fileref="images/Chapter-Guvnor/template-rule5-grouped.png"
                           format="PNG" scalefit="1"></imagedata>
              </imageobject>
            </mediaobject>
          </figure>

          <para>When the value of a grouped cell is altered all cells that
          have been collapsed also have their values updated.</para>
        </section>
      </section>

      <section>
        <title>Generated DRL</title>

        <para>Whilst not necessary, rule authors can view the DRL that will be
        generated for a "Rule Template" and associated data. This feature and
        its operation is no different to that for other assets. Select the
        "Source" -&gt; "View Source" menu item from the Asset Editor screen.
        The DRL for all rules will be displayed.</para>

        <figure>
          <title>Generated DRL</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Guvnor/template-rule6.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>
      </section>
    </section>

    <section>
      <title>Rule flows</title>

      <para>Rule flows: Rule flows allow you to visually describe the steps
      taken - so not all rules are evaluated at once, but there is a flow of
      logic. Rule flows are not covered in this chapter on the Guvnor, but you
      can use the IDE to graphically draw ruleflows, and upload the
      <filename>.rfm</filename> file to the Guvnor.</para>

      <para>Similar to spreadsheets, you upload/download ruleflow files (the
      eclipse IDE has a graphical editor for them). The details of Rule Flows
      are not discussed here.</para>
    </section>

    <section>
      <title>Technical rules (DRL)</title>

      <para>Technical (DRL) rules are stored as text - they can be managed in
      the Guvnor. A DRL can either be a whole chunk of rules, or an individual
      rule. if its an individual rule, no package statement or imports are
      required (in fact, you can skip the "rule" statement altogether, just
      use "when" and "then" to mark the condition and action sections
      respectively). Normally you would use the IDE to edit raw DRL files,
      since it has all the advanced tooling and content assistance and
      debugging. However, there are times when a rule may have to deal with
      something fairly technical in a package in Guvnor. In any typical
      package of rules, you generally have a need for some "technical rules" -
      you can mix and match all the rule types together of course.</para>

      <figure>
        <title>DRL technical rule</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Guvnor/DRLRule.png"
                       format="PNG" scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Functions</title>

      <para>Functions are another asset type. They are NOT rules, and should
      only be used when necessary. The function editor is a textual editor.
      Functions</para>

      <figure>
        <title>Function</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Guvnor/Function.png"
                       format="PNG" scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Data enumerations (drop down list configurations)</title>

      <para>Data enumerations are an optional asset type that technical folk
      can configure to provide drop down lists for the guided editor. These
      are stored and edited just like any other asset, and apply to the
      package that they belong to.</para>

      <para>The contents of an enum config are a mapping of Fact.field to a
      list of values to be used in a drop down. That list can either be
      literal, or use a utility class (which you put on the classpath) to load
      a list of strings. The strings are either a value to be shown on a drop
      down, or a mapping from the code value (what ends up used in the rule)
      and a display value (see the example below, using the '=').</para>

      <figure>
        <title>Data enumeration</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Guvnor/EnumConfig.png"
                       format="PNG" scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>In the above diagram - the "MM" indicates a value that will be
      used in the rule, yet "Mini Mal" will be displayed in the GUI.</para>

      <para>Getting data lists from external data sources: It is possible to
      have the Guvnor call a piece of code which will load a list of Strings.
      To do this, you will need a bit of code that returns a
      <code>java.util.List</code> (of String's) to be on the classpath of the
      Guvnor. Instead of specifying a list of values in the Guvnor itself -
      the code can return the list of Strings (you can use the "=" inside the
      strings if you want to use a different display value to the rule value,
      as normal). For example, in the 'Person.age' line above, you could
      change it to:</para>

      <programlisting> 'Person.age' : (new com.yourco.DataHelper()).getListOfAges()</programlisting>

      <para>This assumes you have a class called "DataHelper" which has a
      method "getListOfAges()" which returns a List of strings (and is on the
      classpath). You can of course mix these "dynamic" enumerations with
      fixed lists. You could for example load from a database using JDBC. The
      data enumerations are loaded the first time you use the guided editor in
      a session. If you have any guided editor sessions open - you will need
      to close and then open the rule to see the change. To check the
      enumeration is loaded - if you go to the Package configuration screen,
      you can "save and validate" the package - this will check it and provide
      any error feedback.</para>
    </section>

    <section>
      <title>Advanced enumeration concepts</title>

      <para>There are a few other advanced things you can do with data
      enumerations.</para>

      <para>Drop down lists that depend on field values: Lets imagine a simple
      fact model, we have a class called Vehicle, which has 2 fields:
      "engineType" and "fuelType". We want to have a choice for the
      "engineType" of "Petrol" or "Diesel". Now, obviously the choice type for
      fuel must be dependent on the engine type (so for Petrol we have ULP and
      PULP, and for Diesel we have BIO and NORMAL). We can express this
      dependency in an enumeration as:</para>

      <programlisting>'Vehicle.engineType' : ['Petrol', 'Diesel']
'Vehicle.fuelType[engineType=Petrol]' : ['ULP', 'PULP' ]
'Vehicle.fuelType[engineType=Diesel]' : ['BIO', 'NORMAL' ]</programlisting>

      <para>This shows how it is possible to make the choices dependent on
      other field values. Note that once you pick the engineType, the choice
      list for the fuelType will be determined.</para>

      <para>Loading enums programmatically: In some cases, people may want to
      load their enumeration data entirely from external data source (such as
      a relational database). To do this, you can implement a class that
      returns a Map. The key of the map is a string (which is the Fact.field
      name as shown above), and the value is a <code>java.util.List</code> of
      Strings.</para>

      <programlisting language="Java">public class SampleDataSource2 {

  public Map&lt;String&gt;, List&lt;String&gt; loadData() {
    Map data = new HashMap();

    List d = new ArrayList();
    d.add("value1");
    d.add("value2");
    data.put("Fact.field", d);

    return data;
 }

}</programlisting>

      <para>And in the enumeration in the BRMS, you put:</para>

      <programlisting language="Java">=(new SampleDataSource2()).loadData()</programlisting>

      <para>The "=" tells it to load the data by executing your code.</para>

      <para>Mode advanced enumerations: In the above cases, the values in the
      lists are calculated up front. This is fine for relatively static data,
      or small amounts of data. Imagine a scenario where you have lists of
      countries, each country has a list of states, each state has a list of
      localities, each locality has a list of streets and so on... You can see
      how this is a lot of data, and it can not be loaded up. The lists should
      be loaded dependent on what country was selected etc...</para>

      <para>Well the above can be addressed in the following fashion:</para>

      <programlisting>'Fact.field[dependentField1, dependentField2]' : '(new com.yourco.DataHelper()).getListOfAges("@{dependentField1}", "@{dependentField2}")'</programlisting>

      <para>Similar to above, but note that we have just specified what fields
      are needed, and also on the right of the ":" there are quotes around the
      expression. This expression will then be evaluated, only when needed,
      substituting the values from the fields specified. This means you can
      use the field values from the GUI to drive a database query, and drill
      down into data etc. When the drop down is loaded, or the rule loaded, it
      will refresh the list based on the fields. 'depenentField1' and
      'dependentField2' are names of fields on the 'Fact' type - these are
      used to calculate the list of values which will be shown in a drop down
      if values for the "field".</para>
    </section>
  </section>

  <section>
    <title>Status management</title>

    <para>Each asset (and also package) in Guvnor has a status flag set. The
    values of the status flag are set in the Administration section of the
    Guvnor. (you can add your own status names). Similar to Categories,
    Statuses do NOT effect the execution in any way, and are purely
    informational. Unlike categories, assets only have one status AT A
    TIME.</para>

    <para>Using statuses is completely optional. You can use it to manage the
    lifecycle of assets (which you can alternatively do with categories if you
    like).</para>

    <figure>
      <title>Asset status</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center"
                     fileref="images/Chapter-Guvnor/AssetChangeStatus.png"
                     format="PNG" scalefit="1"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>You can change the status of an individual asset (like in the
    diagram above). Its change takes effect immediately, no separate save is
    needed.</para>

    <figure>
      <title>Asset status</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center"
                     fileref="images/Chapter-Guvnor/PackageChangeStatus.png"
                     format="PNG" scalefit="1"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>You can change the status of a whole package - this sets the status
    flag on the package itself, but it ALSO changes the statuses on ALL the
    assets that belong to this package in one hit (to be the same as what you
    set the package to).</para>
  </section>

  <section>
    <title>Package management</title>

    <para>Configuring packages is generally something that is done once, and
    by someone with some experience with rules/models. Generally speaking,
    very few people will need to configure packages, and once they are setup,
    they can be copied over and over if needed. Package configuration is most
    definitely a technical task that requires the appropriate
    expertise.</para>

    <para>All assets live in "packages" in the Guvnor - a package is like a
    folder (it also serves as a "namespace"). A home folder for rule assets to
    live in. Rules in particular need to know what the fact model is, what the
    namespace is etc.</para>

    <para><figure>
        <title>The package explorer</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Guvnor/PackageExplorer.png"
                       format="PNG" scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>The above picture shows the package explorer. Clicking on an
    asset type will show a list of matches (for packages with thousands of
    rules, showing the list may take several seconds - hence the importance of
    using categories to help you find your way around).</para>

    <para>So while rules (and assets in general) can appear in any number of
    categories, they only live in one package. If you think of the Guvnor as a
    file system, then each package is a folder, and the assets live in that
    folder - as one big happy list of files. When you create a deployment
    snapshot of a package, you are effectively copying all the assets in that
    "folder" into another special "folder".</para>

    <para>The package management feature allows you to see a list of packages,
    and then "expand" them, to show lists of each "type" of asset (there are
    many assets, so some of them are grouped together):</para>

    <para>The asset types:</para>

    <itemizedlist>
      <listitem>
        <para>Business assets: this shows a list of all "business rule" types,
        which include decision tables, business rules etc. etc.</para>
      </listitem>

      <listitem>
        <para>Technical assets: this is a list of items that would be
        considered technical (e.g. DRL rules, data enumerations and rule
        flows).</para>
      </listitem>

      <listitem>
        <para>Functions: In the Guvnor you can also have functions defined
        (optionally of course).</para>
      </listitem>

      <listitem>
        <para>DSL: Domain Specific Languages can also be stored as an asset.
        If they exist (generally there is only one), then they will be used in
        the appropriate editor GUIs.</para>
      </listitem>

      <listitem>
        <para>Model: A package requires at least one model - for the
        rules.</para>
      </listitem>

      <listitem>
        <para>WorkingSets: Working Sets let you create subsets of package's
        Fact Types and apply constraints to their fields.</para>
      </listitem>
    </itemizedlist>

    <figure>
      <title>Creating new assets</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center"
                     fileref="images/Chapter-Guvnor/PackageNewItemTooltip.png"
                     format="PNG" scalefit="1"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>From the package explorer you can create new rules, or new assets.
    Some assets you can only create from the package explorer. The above
    picture shows the icons which launch wizards for this purpose. If you
    hover the mouse over them, a tooltip will tell you what they do.</para>

    <figure>
      <title>Package configuration</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center"
                     fileref="images/Chapter-Guvnor/PackageConfig.png"
                     format="PNG" scalefit="1"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>One of the most critical things you need to do is configure
    packages. This is mostly importing the classes used by the rules, and
    globals variables. Once you make a change, you need to save it, and that
    package is then configured and ready to be built. For example, you may add
    a model which has a class called <code>com.something.Hello</code>, you
    would then add <code>import com.something.Hello</code> in your package
    configuration and save the change.</para>

    <figure>
      <title>Package building</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center"
                     fileref="images/Chapter-Guvnor/PackageBuild.png"
                     format="PNG" scalefit="1"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>Finally you would "build" a package. Any errors caught are then
    shown at this point. If the build was successful, then you will have the
    option to create a snapshot for deployment. You can also view the DRL that
    this package results in.</para>

    <warning>
      <para>In cases of large numbers of rules, all these operations can take
      some time.</para>
    </warning>

    <para>It is optional at this stage to enter the name of a "selector" - see
    the admin section for details on how to configure custom selectors for
    your system (if you need them - selectors allow you to filter down what
    you build into a package - if you don't know what they are for, you
    probably don't need to use them).</para>

    <section>
      <title>Importing DRL packages</title>

      <para>It is also possible to create a package by importing an existing
      DRL file. When you choose to create a new package, you can choose an
      option to upload a <filename>.drl</filename> file. The Guvnor will then
      attempt to understand that DRL, break create a package for you. The
      rules in it will be stored as individual assets (but still as DRL text
      content). Note that to actually build the package, you will need to
      upload an appropriate model (as a JAR) to validate against, as a
      separate step.</para>
    </section>
  </section>

  <section>
    <title>Version management</title>

    <para>Both assets and whole packages of assets are "versioned" in the
    Guvnor, but the mechanism is slightly different. Individual assets are
    saved a bit like a version of a file in a source control system. However,
    packages of assets are versioned "on demand" by taking a snapshot
    (typically which is used for deployment). The next section talks about
    deployment management and snapshots.</para>

    <figure>
      <title>Asset versions</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center"
                     fileref="images/Chapter-Guvnor/AssetVersionHistory.png"
                     format="PNG" scalefit="1"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>Each time you make a change to an asset, it creates a new item in
    the version history. This is a bit like having an unlimited undo. You can
    look back through the history of an individual asset like the list above,
    and view it (and restore it) from that point in time.</para>
  </section>

  <section>
    <title>Deployment management</title>

    <para>Snapshots, URLS and binary packages:</para>

    <para>URLs are central to how built packages are provided. The Guvnor
    provides packages via URLs (for download and use by the Knowledge Agent).
    These URLs take the form of:</para>

    <synopsis>http://&lt;server&gt;/guvnor-webapp/org.drools.guvnor.Guvnor/package/&lt;packageName&gt;/&lt;packageVersion&gt;</synopsis>

    <para>&lt;packageName&gt; is the name you gave the package.
    &lt;packageVersion&gt; is either the name of a snapshot, or "LATEST" (if
    its LATEST, then it will be the latest built version from the main
    package, not a snapshot). You can use these in the agent, or you can paste
    them into your browser and it will download them as a file.</para>

    <para>Refer to the section on the Knowledge Agent for details on how you
    can use these URLs (and binary downloads) in your application, and how
    rules can be updated on the fly.</para>

    <figure>
      <title>Deployment snapshots</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center"
                     fileref="images/Chapter-Guvnor/Snapshots.png"
                     format="PNG" scalefit="1"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The above shows deployment snapshots view. On the left there is a
    list of packages. Clicking on a specific package will show you a list of
    snapshots for that package (if any). From there you can copy, remove or
    view an asset snapshot. Each snapshot is available for download or access
    via a URL for deployment.</para>
  </section>

  <section>
    <title>Navigating and finding rules</title>

    <para>The two main ways of viewing the repository are by using user-driven
    Categorization (tagging) as outlined above, and the package explorer
    view.</para>

    <para>The category view provides a way to navigate your rules in a way
    that makes sense to your organization.</para>

    <figure>
      <title>Category view</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center"
                     fileref="images/Chapter-Guvnor/CategoryExplorer.png"
                     format="PNG" scalefit="1"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The above diagram shows categories in action. Generally under each
    category you should have no more then a few dozen rules, if
    possible.</para>

    <para>The alternative and more technical view is to use the package
    explorer. This shows the rules (assets) closer to how they are actually
    stored in the database, and also separates rules into packages (name
    spaces) and their type (format, as rules can be in many different
    formats).</para>

    <figure>
      <title>Package view</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center"
                     fileref="images/Chapter-Guvnor/PackageExplorer.png"
                     format="PNG" scalefit="1"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The above shows the alternate way of exploring - using
    packages.</para>
  </section>
</chapter>
