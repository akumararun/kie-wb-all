<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/1999/xhtml"
         xmlns:ns4="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1998/Math/MathML"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>The Fact Model</title>

  <para>For any rule base application, a fact model is needed to drive the
  rules. The fact model typically overlaps with the applications domain model,
  but in general it will be decoupled from it (as it makes the rules easier to
  manage over time). There are no technical limitations on using your domain
  model as your fact model, however this introduces tighter coupling between
  your business domain (domain model) and your knowledge domain (fact model).
  Consequentially if your domain model were to change you would need to, at
  the very least, revisit your rule definitions.</para>

  <section>
    <title>Ways to define a Fact Model</title>

    <para>There are two ways to do define your fact model; each of which will
    be discussed in more detail in the following sections.</para>

    <itemizedlist>
      <listitem>
        <para>Upload a JAR file containing Java Classes used by both your
        application and rules.</para>
      </listitem>

      <listitem>
        <para>Declare a model within Guvnor; that can be exported as a
        KnowledgeBase and used within your Java code.</para>
      </listitem>
    </itemizedlist>

    <figure>
      <title>Choosing a model type</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center"
                     fileref="images/Chapter-Guvnor/ModelChooseType.png"
                     format="PNG" scalefit="0" xml:base="../../"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>
  </section>

  <section>
    <title>Creating a JAR Model</title>

    <para>Creating and uploading a JAR model file is a two step
    process.</para>

    <section>
      <title>Create a JAR Model asset</title>

      <para>Select "Upload POJO Model JAR" from the "Create New" popup menu
      from the "Knowledge Bases" section of the Explorer widget. This will
      launch the "New Asset" configuration screen from which the new upload
      can be given basic details such as name, category and a
      description.</para>

      <figure>
        <title>Creating a JAR Model asset</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Guvnor/ModelUploadJAR.png"
                       format="PNG" scalefit="0" xml:base="../../"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Upload a JAR Model into the asset</title>

      <para>Once the POJO Model JAR asset has been created you are presented
      with a screen to upload the actual JAR containing the model defined as
      Java classes and packaged in a regular Java JAR file. Many Java IDE's
      are able to export classes as a JAR file.</para>

      <figure>
        <title>Uploading the JAR</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Guvnor/ModelUploadJAR2.png"
                       format="PNG" scalefit="1" xml:base="../../"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section>
    <title>Declarative model</title>

    <para>Why would you chose declared types over JAR files: generally this
    reinforces the fact that the model "belongs" to the KnowledgeBase, rather
    then the application, and allows the model to have a lifecycle separate
    from the application. It also allows Java types to be enriched with Rule
    specific annotations. Additionally it also removes the burden of keeping
    JAR files syncronised between rules and the applications that use the
    rules.</para>

    <para>Declarative models can be either:-</para>

    <itemizedlist>
      <listitem>
        <para>A standalone definition of the entire Fact model used within
        your rules.</para>
      </listitem>

      <listitem>
        <para>Supplementary Fact defintions to support a Java POJO
        Model.</para>
      </listitem>

      <listitem>
        <para>Used to enrich a Java JAR model as uploaded in the previous
        section. Enriching JAR models allows annotations used by Drools (such
        as a "role" of type "event" for Facts used as events in Complex Event
        Processing) to be appended to classes. When enriching an existing Java
        JAR model the package name in Guvnor needs to be identical to the Java
        package name containing the class(es) you wish to enrich.</para>
      </listitem>
    </itemizedlist>

    <section>
      <title>Creating a Declarative Model</title>

      <para>Creating a Declarative Model is a two step process.</para>

      <section>
        <title>Create a Declarative Model asset</title>

        <para>Select "New Declarative Model" from the "Create New" popup menu
        from the "Knowledge Bases" section of the Explorer widget. This will
        launch the "New Asset" configuration screen from which the new upload
        can be given basic details such as name, category and a
        description.</para>

        <figure>
          <title>Creating a Declarative Model asset</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Guvnor/ModelDeclarative1.png"
                         format="PNG" scalefit="0" xml:base="../../"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title>Defining the model</title>

        <para>Once the Declarative Model asset has been created you are
        presented with the initial modelling screen; that is empty to
        begin.</para>

        <figure>
          <title>Initial modelling screen</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Guvnor/ModelDeclarative2.png"
                         format="PNG" scalefit="1" xml:base="../../"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>

        <para>Facts, being semantically equivalent to Java classes, can be
        created by selecting the "Add new fact type" button. An existing Fact
        definition can be edited by clicking the "pencil" icon on the same row
        as the Fact name. Furthermore existing Facts can be deleted by
        clicking the "[-]" icon.</para>

        <figure>
          <title>New fact popup</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Guvnor/ModelDeclarative3.png"
                         format="PNG" scalefit="0" xml:base="../../"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>

        <figure>
          <title>A Declarative model with one Fact defined</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Guvnor/ModelDeclarative4.png"
                         format="PNG" scalefit="1" xml:base="../../"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>

        <para>Fact Fields can be created by selecting the "Add field" button.
        The type of a field is suggested by a list (but this list is not
        exhaustive). An existing Fact Field definition can be edited by
        clicking the "pencil" icon on the same row as the Fact Field name.
        Furthermore existing Fact Fields can be deleted by clicking the "[-]"
        icon.</para>

        <figure>
          <title>Fact Field popup</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Guvnor/ModelDeclarative5.png"
                         format="PNG" scalefit="0" xml:base="../../"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>

        <para>Fact annotations can be created by selecting the "Add
        annotation" button. Annotations are listed under the Fact title,
        before the fields, by convention. Annotations are prefixed with the
        "@" symbol. This not only makes them instantly recognisable but is
        also consistent with their definition in DRL.</para>

        <para>The annotation "Name" and "Value" are mandatory whereas the
        "Key" is optional. If a "Key" is not given a default value of "value"
        will be assigned. This is consistent with how annotations are held
        within Drools Expert.</para>

        <para>An existing Fact Annotation can be edited by clicking the
        "pencil" icon on the same row as the Fact Annotation name. Furthermore
        existing Fact Annotations can be deleted by clicking the "[-]"
        icon.</para>

        <figure>
          <title>Fact annotation popup</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Guvnor/ModelDeclarative6.png"
                         format="PNG" scalefit="0" xml:base="../../"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>

        <figure>
          <title>A completed definition</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Guvnor/ModelDeclarative7.png"
                         format="PNG" scalefit="1" xml:base="../../"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title>Extending the model</title>

        <para>Declarative types can extend existing:-</para>

        <itemizedlist>
          <listitem>
            <para>Java classes uploaded as part of a JAR (POJO) model</para>
          </listitem>

          <listitem>
            <para>Other declared types in the same package.</para>
          </listitem>
        </itemizedlist>

        <figure>
          <title>Extending an existing type</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Guvnor/ModelDeclarative8.png"
                         format="PNG" scalefit="0" xml:base="../../"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>

        <figure>
          <title>Declarative summary showing types that extend other
          types</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Guvnor/ModelDeclarative9.png"
                         format="PNG" scalefit="1" xml:base="../../"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Extending a Java class</title>

          <para>To extend a Java class the following steps need to be
          completed:-</para>

          <itemizedlist>
            <listitem>
              <para>Import the applicable Java JAR into Guvnor</para>
            </listitem>

            <listitem>
              <para>If the Java package name in which the class belongs is
              different to the Guvnor package name in to which the JAR has
              been imported ensure the Guvnor package imports the class from
              which you want to extend. This is normally completed for you
              automatically when you upload a JAR model however if you have
              multiple classes with the same name in the JAR you should check
              the appropriate one has been imported.</para>
            </listitem>

            <listitem>
              <para>Within the Declarative Modelling screen define an empty
              type (i.e. with no fields) of the same name as that you want to
              extend.</para>
            </listitem>

            <listitem>
              <para>Create a new declarative type as appropriate, extending
              the empty declaration created in the preceeding step.</para>
            </listitem>
          </itemizedlist>

          <note>
            <para>Only properties on Java classes that have both a "getter"
            and "setter" following standard Java Bean conventions are
            available on the declared sub-type. This is because the
            declarative symantics imply all properties on declared types have
            both accessors and mutators.</para>
          </note>
        </section>

        <section>
          <title>Extending existing declared types</title>

          <para>To extend an existing declared type simply select the
          appropriate type from the "Type extends" dropdown when defining the
          sub-type.</para>
        </section>
      </section>

      <section>
        <title>Consuming a declarative model from Java</title>

        <para>Declared types are generated at knowledge base compilation time,
        i.e. the application will only have access to them at application run
        time. Therefore, these classes are not available for direct reference
        from the application.</para>

        <para>Declarative types can be used like normal fact objects, but the
        way you create them is different (as they are not on your applications
        classpath). To create these objects, they are available from the
        KnowledgeBase instance.</para>

        <example>
          <title>Handling declared fact types through the API</title>

          <programlisting>// get a reference to a knowledge base with a declared type:
KnowledgeBase kbase = ...

// get the declared FactType
FactType personType = kbase.getFactType( "org.drools.examples",
                                         "Person" );

// handle the type as necessary:
// create instances:
Object bob = personType.newInstance();

// set attributes values
personType.set( bob,
                "name",
                "Bob" );
personType.set( bob,
                "age",
                42 );

// insert fact into a session
StatefulKnowledgeSession ksession = ...
ksession.insert( bob );
ksession.fireAllRules();

// read attributes
String name = personType.get( bob, "name" );
int age = personType.get( bob, "age" );</programlisting>
        </example>

        <note>
          <para>The namespace of the declared type is the package namespace
          where it was declared (i.e. <code>org.drools.examples</code> in the
          above example).</para>
        </note>
      </section>
    </section>
  </section>
</section>
